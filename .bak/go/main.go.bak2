package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
)

type Result struct {
	Code    int8
	Message string
}

func main() {
	// log.Fatal(http.ListenAndServe(":8080", http.FileServer(http.Dir("./doc"))))

	f := func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json")

		id := r.URL.Query().Get("id")
		name := r.URL.Query().Get("name")

		log.Printf("URL : %v, id : %s, name : %s\n", r.URL, id, name)

		var buf bytes.Buffer

		enc := json.NewEncoder(&buf)

		result := new(Result)

		if id != "" && name != "" {
			result.Code = 0
			result.Message = fmt.Sprintf("Hello, %s (%s).", name, id)

		} else {
			result.Code = 1
			result.Message = fmt.Sprintf("parameter id and name are required.")

		}

		enc.Encode(result)
		fmt.Fprintf(w, "%s", string(buf.Bytes()))
	}

	http.HandleFunc("/api", f)

	http.Handle("/doc/", http.StripPrefix("/doc/", http.FileServer(http.Dir("./doc"))))
	log.Fatal(http.ListenAndServe(":8080", nil))

	// err := http.ListenAndServeTLS(":8443", "cert.pem", "key.pem", nil)
	// log.Fatal(err)
}
