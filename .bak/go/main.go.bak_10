package main

import (
	"archive/zip"
	"bytes"
	"crypto"
	"crypto/rand"
	"crypto/rsa"
	"crypto/sha256"
	"crypto/x509"
	"encoding/base64"
	"encoding/json"
	"encoding/pem"
	"errors"
	"fmt"
	"io"
	"io/ioutil"
	// "log"
	"os"
)

type SingatureData struct {
	Name      string `json:"name"`
	Hash      string `json:"sha256"`
	Signature string `json:"signature"`
}

type ZipBytes struct {
	b []byte
}

func NewZipBytes(b []byte) *ZipBytes {
	z := new(ZipBytes)

	z.b = b

	return z
}

func (z *ZipBytes) Bytes() []byte {
	return z.b
}

func (z *ZipBytes) ReadAt(p []byte, off int64) (int, error) {
	//NOTE: This is because the in memory zip won't be too long.
	ioff := int(off)

	pos := -1
	n := 0

	if ioff+len(p) < len(z.Bytes()) {
		n = len(p)
		pos = ioff
	} else {
		n = len(z.Bytes()) - ioff
		pos = ioff
	}

	if n > 0 {
		copy(p, z.Bytes()[pos:pos+n])
		return n, nil
	} else {
		return 0, io.EOF
	}
}

func main() {
	sigData := make([]*SingatureData, 0)

	prvFile, err := os.Open("./private.pem")

	if err != nil {
		panic(err)
	}

	prvKeyBytes, err := ioutil.ReadAll(prvFile)

	if err != nil {
		panic(err)
	}

	prvFile.Close()

	prvKeyData, _ := pem.Decode(prvKeyBytes)

	if prvKeyData == nil {
		panic(errors.New("pem decode privatekey failed."))
	}

	prvKey, err := x509.ParsePKCS1PrivateKey(prvKeyData.Bytes)

	prv := prvKey

	if err != nil {
		panic(err)
	}

	pubFile, err := os.Open("./public.pem")

	if err != nil {
		panic(err)
	}

	pubKeyBytes, err := ioutil.ReadAll(pubFile)

	if err != nil {
		panic(err)
	}

	pubFile.Close()

	pubKeyData, _ := pem.Decode(pubKeyBytes)

	if pubKeyData == nil {
		panic(errors.New("pem decode failed."))
	}

	pubKey, err := x509.ParsePKIXPublicKey(pubKeyData.Bytes)

	pub := pubKey.(*rsa.PublicKey)

	if err != nil {
		panic(err)
	}

	var filePathName string = "./test.zip"

	if len(os.Args) > 2 {
		filePathName = os.Args[1]
	}

	zipFile, err := os.OpenFile(filePathName, os.O_RDONLY, 0666)

	if err != nil {
		panic(err)
	}

	zipBytes, err := ioutil.ReadAll(zipFile)

	if err != nil {
		panic(err)
	}

	zipFile.Close()

	zb := NewZipBytes(zipBytes)

	r, err := zip.NewReader(zb, int64(len(zb.Bytes())))

	if err != nil {
		panic(err)
	}

	for _, f := range r.File {
		rc, err := f.Open()

		if err != nil {
			panic(err)
		}

		h := sha256.New()

		n, _ := io.Copy(h, rc)

		hashed := h.Sum(nil)

		signature, err := rsa.SignPKCS1v15(rand.Reader, prv, crypto.SHA256, hashed)

		err = rsa.VerifyPKCS1v15(pub, crypto.SHA256, hashed, signature)

		if err != nil {
			panic(err)
		}

		if n > 0 {
			d := new(SingatureData)

			d.Name = f.Name
			d.Hash = base64.StdEncoding.EncodeToString(hashed)
			d.Signature = base64.StdEncoding.EncodeToString(signature)

			sigData = append(sigData, d)
		}

		rc.Close()
	}

	var buf bytes.Buffer

	enc := json.NewEncoder(&buf)

	enc.Encode(sigData)

	fmt.Println(string(buf.Bytes()))
}
